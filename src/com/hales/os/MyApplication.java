package com.hales.os;


import com.codename1.components.InfiniteProgress;
import com.codename1.components.InteractionDialog;
import com.codename1.components.MultiButton;
import com.codename1.components.ToastBar;
import com.codename1.googlemaps.MapContainer;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.Log;
import com.codename1.io.NetworkManager;
import com.codename1.maps.Coord;
import com.codename1.processing.Result;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.geom.Rectangle;
import com.codename1.ui.layouts.*;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

// 72SKyhdm
/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class MyApplication {



    private static final String HTML_API_KEY = "AIzaSyDm0w6M3HKu1z7eeEwZsX3tWna0UwWfwZA";
    private Form current, vendorlist,hi,pizzalist, towlist, plumberlist,catList,alertList,reviewList,gasList,electricianlist,dellist;
    private Image duke;
    private Button ok,notOk, sendText,rr;
    private TextArea sosBox;
    private GPS[] locations;
    private int r;
    public Place[] myplace,delplace;
    public Plumber[] myPlumber;
    public Electrician[] myElect;
    public double myLat,myLng;
    String pagetoken;
    private Image pic,chip,miltonpic;
    private EncodedImage encImage;
    private String id;


    public void loadPic(String Url)
{


   /* // this encImae is used to laod images form the net
    encImage = EncodedImage.createFromImage(chip, false);

    // this loads hockey picture from the net into chip
    chip=URLImage.createToStorage(encImage, Url, Url, URLImage.RESIZE_SCALE);
    pic=chip;
    */
}
    public void init(Object context) {
        try {
            Resources theme = Resources.openLayered("/theme");

            UIManager.getInstance().setThemeProps(theme.getTheme(theme.getThemeResourceNames()[0]));
            Display.getInstance().setCommandBehavior(Display.COMMAND_BEHAVIOR_SIDE_NAVIGATION);
            UIManager.getInstance().getLookAndFeel().setMenuBarClass(SideMenuBar.class);
            Toolbar.setGlobalToolbar(true);
            Form hi = new Form("LOADING", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));
            Container panel= new Container();
            panel.setLayout(new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));

            Label l = new Label(" One Moment");
            panel.addComponent(BorderLayout.CENTER,l);
            hi.addComponent(BorderLayout.NORTH,panel);
            Image i= theme.getImage("eye.jpg");
            i.scaled(hi.getWidth(),hi.getHeight());
            final Button apple = new Button(i);
           // final Label apple = new Label(theme.getImage("eye.jpg"));




            //  Button getStarted = new Button("");
            //FontImage.setMaterialIcon(getStarted, FontImage.MATERIAL_LINK);
           // getStarted.setUIID("GetStarted");
/*
            try {
                pic=  theme.getImage("eye.jpg");
                miltonpic=  pic;
                chip=  theme.getImage("eye.jpg");

            } catch (Exception e) {
                e.printStackTrace();
            }
*/
            hi.addComponent(BorderLayout.CENTER, apple);
            hi.show();

        } catch (IOException e) {
            e.printStackTrace();
        }


    }
    public void makePhonecall() {
        //Display.getInstance().setSMS("+999999999", "My SMS Message");
        Display.getInstance().dial("+18009346489");
    }
    public void start() {
        if (current != null) {
            current.show();
            return;
        }


        Dialog loading = new InfiniteProgress().showInifiniteBlocking();
       // loading.addComponent(new Label("LOADING"));
        // loading = new Form("loading");
      //  loading.setLayout(new GridLayout(1,1));
      //  Label l = new Label("LOADING");
      //  loading.addComponent(l);
      //  loading.addComponent(new InfiniteProgress());


      //  loading.show();
        /*    try {
              //  System.out.println(Display.getInstance().getLocationManager().getCurrentLocation().getLatitude());
            } catch (IOException e) {
                e.printStackTrace();
            }
           */

        try {
            myLat=Display.getInstance().getLocationManager().getCurrentLocation().getLatitude();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            myLng= Display.getInstance().getLocationManager().getCurrentLocation().getLongitude();
        } catch (IOException e) {
            e.printStackTrace();
        }

   //    myLat=42.255907;
    //  myLng=-71.071808;

        // Display.getInstance().getLocationManager().getCurrentLocation().getLatitude(), Display.getInstance().getLocationManager().getCurrentLocation().getLongitude())
         duke = null;
        searchLocations("Boston");
     //   catList= new Form("list of cat");
        vendorlist= new Form("Vendor2", new BorderLayout());
       // vendorlist.setLayout(new GridLayout(1,1));
        makeVendorCat2();
       // makeVendorCat();

        locations=getGpsData();
        System.out.println(locations[0].name);
        towlist=new Form("Tow");
       // pizzalist= new Form("Pizza");
        //   plumberlist = new Form("Smack");
        makePlumber();
        makeElectrician();

        searchDelievery("s");
        makePizza(myplace);
        makeDel(delplace);
        hi = new Form("Native Maps Test");
        //Add navigation commands to the home Form
        NavigationCommand homeCommand = new NavigationCommand("Home2");
        homeCommand.setNextForm(vendorlist);
        hi.getToolbar().addCommandToSideMenu(homeCommand);

        alertList= new Form( "ARE YOU OK?");
        ok= new Button("OK");
        ok.addActionListener(e->{
            // cnt.setCameraPosition(new Coord(42.2578355, -71.07300930000002));
            /*
                     amountButton[i].getStyle().setFont(fb.getFontsize());
                amountButton[i].getStyle().setBgColor(0);
                amountButton[i].repaint();
            */
            try {
                alertList.getStyle().setBgColor(0x99FF00);
                alertList.repaint();
             System.out.println("test");



            } catch (Exception e1) {
                e1.printStackTrace();
            }
        });
        notOk= new Button("NotOK");
        notOk.addActionListener(e->{
            // cnt.setCameraPosition(new Coord(42.2578355, -71.07300930000002));
            /*
                     amountButton[i].getStyle().setFont(fb.getFontsize());
                amountButton[i].getStyle().setBgColor(0);
                amountButton[i].repaint();
            */
            try {
                alertList.getStyle().setBgColor(0xFF0000);
                alertList.repaint();
                System.out.println("test");



            } catch (Exception e1) {
                e1.printStackTrace();
            }
        });

        sendText= new Button("enter");
        Container botPanel= new Container();
        botPanel.setLayout(new GridLayout(1,3));
        sosBox= new TextField("hi");
        sosBox.setEditable(true) ;
        alertList.setLayout(new BorderLayout());
        alertList.addComponent(BorderLayout.CENTER,sosBox);
        botPanel.addComponent(ok);
        botPanel.addComponent(notOk);
        botPanel.addComponent(sendText);
        alertList.addComponent(BorderLayout.SOUTH,botPanel);




        NavigationCommand cmd1 = new NavigationCommand("Plumber2");
        cmd1.setNextForm(plumberlist);
        setBackCommand(plumberlist);
        hi.getToolbar().addCommandToSideMenu(cmd1);

        NavigationCommand cmd2 = new NavigationCommand("AlertNow");
        cmd2.setNextForm(alertList);
       setBackCommand(alertList);
        hi.getToolbar().addCommandToSideMenu(cmd2);

        NavigationCommand cmd3 = new NavigationCommand("restaurant");
        cmd3.setNextForm(pizzalist);
        setBackCommand(pizzalist);
        hi.getToolbar().addCommandToSideMenu(cmd3);



        hi.setLayout(new BorderLayout());




        vendorlist.getToolbar().addCommandToSideMenu(homeCommand);


        vendorlist.getToolbar().addCommandToSideMenu(cmd1);


        vendorlist.getToolbar().addCommandToSideMenu(cmd2);


        vendorlist.getToolbar().addCommandToSideMenu(cmd3);
        NavigationCommand cmd4 = new NavigationCommand("Map");
        cmd4.setNextForm(hi);
        vendorlist.getToolbar().addCommandToSideMenu(cmd4);




        /// set up layout for venorlist


        final MapContainer cnt = new MapContainer("AIzaSyDm0w6M3HKu1z7eeEwZsX3tWna0UwWfwZA");
        //  AIzaSyDm0w6M3HKu1z7eeEwZsX3tWna0UwWfwZA   // android
        //AIzaSyDLC8q8K_s4ZAqibEQ1JFnK05DJiRnEc4g  // javascript
/*
 android.xapplication=<meta-data     android:name="com.google.android.maps.v2.API_KEY"     android:value="AIzaSyDm0w6M3HKu1z7eeEwZsX3tWna0UwWfwZA"/>
android.xpermissions=<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/> <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/><uses-feature         android:glEsVersion="0x00020000"         android:required="true"/>

*/



        Button btnMoveCamera = new Button("Here");
        btnMoveCamera.addActionListener(e->{
            // cnt.setCameraPosition(new Coord(42.2578355, -71.07300930000002));

            try {
                myLat=Display.getInstance().getLocationManager().getCurrentLocation().getLatitude();
                myLng=Display.getInstance().getLocationManager().getCurrentLocation().getLongitude();
                cnt.setCameraPosition(new Coord( myLat, myLng));
                makePizza(myplace);
                makeDel(delplace);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        });

      //  cnt.setCameraPosition(new Coord(42.255653, -71.071787));

        Style s = new Style();
        s.setFgColor(0xff0000);
        s.setBgTransparency(0);
        FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s, Display.getInstance().convertToPixels(3));

        Button btnAddMarker = new Button("1Marker1");
        btnAddMarker.addActionListener(e->{
            System.out.println(r+"r");
        System.out.println(r+"lat"+locations[r].name);
            cnt.setCameraPosition(new Coord(locations[r].latatude, locations[r].longitude));
            EncodedImage m= EncodedImage.createFromImage(markerImg, false);
          m= (EncodedImage) m.scaled(30,30);
            cnt.addMarker(
                    m,
                    cnt.getCameraPosition(),
                    locations[r].name,
                    locations[r].disctiption,
                    evt -> {
                        ToastBar.showMessage("You clicked the marker", FontImage.MATERIAL_PLACE);
                    }

            );
            r++;
        });

        Button btnAddPath = new Button("Path");
        btnAddPath.addActionListener(e->{

            cnt.addPath(
                    cnt.getCameraPosition(),
                    new Coord(-33.866, 151.195), // Sydney
                    new Coord(-18.142, 178.431),  // Fiji
                    new Coord(21.291, -157.821),  // Hawaii
                    new Coord(37.423, -122.091)  // Mountain View
            );
        });

        Button btnClearAll = new Button("Clear");
        btnClearAll.addActionListener(e->{
            cnt.clearMapLayers();
        });

        cnt.addTapListener(e->{
            TextField enterName = new TextField();
            Container wrapper = BoxLayout.encloseY(new Label("Name:"), enterName);
            InteractionDialog dlg = new InteractionDialog("Add Marker");
            dlg.getContentPane().add(wrapper);
            enterName.setDoneListener(e2->{
                String txt = enterName.getText();
                cnt.addMarker(
                        EncodedImage.createFromImage(markerImg, false),
                        cnt.getCoordAtPosition(e.getX(), e.getY()),
                        enterName.getText(),
                        "",
                        e3->{
                            ToastBar.showMessage("You clicked "+txt, FontImage.MATERIAL_PLACE);
                        }
                );
                dlg.dispose();
            });
            dlg.showPopupDialog(new Rectangle(e.getX(), e.getY(), 10, 10));
            enterName.startEditingAsync();
        });

/*
            Container root = LayeredLayout.encloseIn(
                    BorderLayout.center(cnt),
                    BorderLayout.center(
                            FlowLayout.encloseBottom(btnMoveCamera, btnAddMarker, btnAddPath, btnClearAll)
                    )
            );
*/



     //   makeVendorCat();

        hi.add(BorderLayout.CENTER, cnt);
        Container south = new Container();
        south.setLayout(new GridLayout(1,4));
        south.addComponent(btnMoveCamera);
        south.addComponent( btnAddMarker);
        south.addComponent( btnAddPath);
        south.addComponent(btnClearAll);
        //, btnAddPath, btnClearAll);
        hi.add(BorderLayout.SOUTH,south);

      //  hi.show();
        System.out.println(cnt.getMaxZoom());
        cnt.setCameraPosition(new Coord(42.2554112, -71.0718136));
        cnt.zoom(new Coord(42.2554112, -71.0718136),17);
       // catList.show();
        vendorlist.setScrollable(true);
        loading.dispose();
        vendorlist.show();




    }
    protected void setBackCommand(Form f) {
        Command back = new Command("") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                vendorlist.showBack();
            }

        };
        Image img = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, UIManager.getInstance().getComponentStyle("TitleCommand"));
        back.setIcon(img);
        System.out.print("TEST");
        f.getToolbar().addCommandToLeftBar(back);
        f.getToolbar().setTitleCentered(true);
        f.setBackCommand(back);
    }
    protected void setBackCommand(Form f, Form ff) {
        Command back = new Command("") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                ff.showBack();
            }

        };
        Image img = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, UIManager.getInstance().getComponentStyle("TitleCommand"));
        back.setIcon(img);

        f.getToolbar().addCommandToLeftBar(back);
        f.getToolbar().setTitleCentered(true);
        f.setBackCommand(back);
    }
    public void makeVendorCat() {

        catList = new Form("CATLIST", new BorderLayout());
        NavigationCommand cmd2 = new NavigationCommand("Tow");
        cmd2.setNextForm(towlist);
        System.out.println(towlist.toString());
        setBackCommand(towlist);
        catList.getToolbar().addCommandToSideMenu(cmd2);

        // Form hi = new Form("one");
        //  hi.addComponent(new Label("Two"));


        String[] abc = new String[]{"POLICE","FIRE","Plumber", "Tow", "restaurant", "Plow", "Meal delivery", "C", "A", "B", "C", "A", "B", "C", "A", "B", "C", "A2", "B2", "C2"};
        //Plumber[] item= getData();


        //getData();
        Container list = new Container(BoxLayout.y());
        list.setScrollableY(true);
        for (int x = 0; x < abc.length; x++) {
            Button b = new Button(abc[x]);
            Button l = new Button(x + "33");
            //b.setSize(new Dimension(100,200));
            Container cnt = new Container(new com.codename1.ui.layouts.FlowLayout());


            // cnt.add(BorderLayout.WEST,l);
            //cnt.add(BorderLayout.EAST,b);
            cnt.add(l);
            cnt.add(b);

            list.add(cnt);
            // b.addActionListener(e -> Log.p("You picked: " + b.getText()));
          //  final String w = abc[x];
            //  b.addActionListener(e -> Dialog.show(b.getText(),"cost="+w,"Done",null));
            l.addActionListener(e -> showOneTypeOfVendor(l.getText()));
            b.addActionListener(e -> showOneTypeOfVendor(b.getText()));

        }
    }

    public void makeVendorCat2() {

        Font largePlainSystemFont = Font.createSystemFont(Font.FACE_SYSTEM, Font.STYLE_PLAIN, Font.SIZE_LARGE);

        String[] abc = new String[]{"POLICE","FIRE","PLUMBER", "TOW", "RESTAURANT", "LOCKSMITH", "PLOW", "LAWYER", "Meal delivery", "ELECTRICIAN", "C", "A", "B", "C", "A", "B", "C", "A2", "B2", "C2B", "C", "A", "B", "C", "A", "B", "C", "A", "B", "C", "A2"};
        //Plumber[] item= getData();


        //getData();
        Container list = new Container(BoxLayout.y());
        list.setScrollableY(true);
        int abcCount=0;
        int x=0;

        Button l,b;
        while(x<abc.length) {
             b = new Button(abc[x++]);
             Image img = FontImage.createMaterial(FontImage.MATERIAL_AIRLINE_SEAT_FLAT, UIManager.getInstance().getComponentStyle("TitleCommand"));
          l= new Button("tesst");
           if(x<abc.length) {
               b.setIcon(img);
               l = new Button(abc[x++]);
           }
            Image imgz = FontImage.createMaterial(FontImage.MATERIAL_ACCESS_ALARM, UIManager.getInstance().getComponentStyle("TitleCommand"));
          //  l.setIcon(imgz);

/*
            if(x<abc.length) {
                final int z=x;
                 l = new Button(abc[x++]){
                     @Override
                     public void paint(Graphics g) {
                         // red color
                         g.setColor(0xff0000);
                            g.setFont(largePlainSystemFont);
                         // paint the screen in red
                         g.fillRect(getX(), getY(), getWidth(), getHeight());

                         // draw hi world in white text at the top left corner of the screen
                         g.setColor(0xffffff);
                         g.drawString(abc[z],getX()+(getHeight()/3)*2+5 , getY()+((getHeight()-largePlainSystemFont.getHeight())/2));

                         g.setColor(0xff0000);

System.out.println((getHeight()-((getHeight()/3)*2))/2+"");
                        g.drawImage(duke,2+((getHeight()- ( getHeight()/3)*2))/2,(getHeight()-((getHeight()/3)*2)),(getHeight()/3)*2,(getHeight()/3)*2);
                       //  g.drawString(abc[z],(getHeight()/3)*2,50);
                     }
                 };;
            }
            else
            {
                 l= new Button("BLANK");
            }
            */
            //b.setSize(new Dimension(100,200));
            Container cnt = new Container(new GridLayout(1,2));

            // cnt.add(BorderLayout.WEST,l);
            //cnt.add(BorderLayout.EAST,b);
            cnt.add(l);
            cnt.add(b);

            list.add(cnt);
            // b.addActionListener(e -> Log.p("You picked: " + b.getText()));
           // final String w = abc[x];
            final String q= b.getText();
            final String qq= l.getText();
            l.addActionListener(e -> showOneTypeOfVendor(qq));
            b.addActionListener(e -> showOneTypeOfVendor(q));

        }

        //hi.addComponent(list);
        vendorlist.add(BorderLayout.CENTER,list);
        vendorlist.setScrollable(true);
        // hi.addComponent(new Label("four"));
        //plumberlist.show();


    }


 public void makeElectrician()
 {

     electricianlist = new Form("Electric", new BorderLayout());
     setBackCommand(electricianlist);


     // String[] abc = new String[] {"A", "B", "C","A", "B", "C","A", "B", "C","A", "B", "C","A", "B", "C","A2", "B2", "C2"};

    // String[] abc =searchPlumber();//=new String[item.length];
    Electrician[] item= searchElect();

    System.out.println("this is how many elect"+item.length);
    //getData();
    Container list = new Container(BoxLayout.y());
    list.setScrollableY(true);
    for(int x=0;x<item.length;x++) {
    //  Container c = new Container();
    //  c.setLayout(new GridLayout(1,1));
    MultiButton distance = new MultiButton(item[x].name);

/*
    System.out.println(x+item[x].name);
        String s ="Miles="+ item[x].distance+" cost="+item[x].price_leve + item[x].raiting+"/5 *";

    if(item[x].price_leve==null)
    {
        s ="Miles="+ item[x].distance+" cost="+item[x].price_leve +"no raiting";
    }
    */
        String s;
        if(item[x].price_leve!=null) {
            s = "Miles=" + item[x].distance + " cost=" + item[x].price_leve + item[x].raiting + "/5 *";
            if (item[x].raiting == null) {
                s = "Miles=" + item[x].distance + " cost=" + item[x].price_leve + "no raiting";
            }
        }
        else
        {
            System.out.println("this is the raiting"+item[x].raiting);
            s = "Miles=" + item[x].distance +"  " + item[x].raiting + "/5 *";
            if (item[x].raiting.equals("")) {
                s = "Miles=" + item[x].distance + " " + "no raiting";
            }
        }

    // String s ="Miles="+ item[x].distance+" cost="+item[x].price_leve +" 3.5/5 *";
    String b = " "+item[x].lng+"*";

    distance.setTextLine2(s);
    distance.setTextLine3("reviews");
    System.out.println(s);
    Container cnt = new Container(new com.codename1.ui.layouts.FlowLayout());
    cnt.setLayout(new GridLayout(1,1));
    cnt.add(distance);


    //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

        try {
            System.out.println("WOWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFfWWWWWWWWWWWWWWWWWWWWWWWWWWWW");
            Slider starSlider = createStarRankSlider();
            System.out.println( (int) ((Double.parseDouble(item[x].raiting)/5)*100)  );
            starSlider.setProgress((int) ((Double.parseDouble(item[x].raiting)/5)*100));
            list.add(FlowLayout.encloseCenter(starSlider));

        }
        catch(Exception err) {


            Log.e(err);
        }


        //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    list.add(cnt);
    final int w= x;//Integer.parseInt(item[x].price_leve);
    distance.addActionListener( e -> {searchreview(item[w].place_id,item[w]);} );
    }

    electricianlist.add(BorderLayout.CENTER,list);
     electricianlist.setScrollable(true);
 }

    /****
     * Make plumber
     */
    public void makePlumber()
    {

        plumberlist = new Form("Plumberlist", new BorderLayout());



        // String[] abc = new String[] {"A", "B", "C","A", "B", "C","A", "B", "C","A", "B", "C","A", "B", "C","A2", "B2", "C2"};

       // String[] abc =searchPlumber();//=new String[item.length];
        Plumber[] item= searchPlumber();


        //getData();
        Container list = new Container(BoxLayout.y());
        list.setScrollableY(true);
        for(int x=0;x<item.length;x++) {
            //  Container c = new Container();
            //  c.setLayout(new GridLayout(1,1));
            MultiButton distance = new MultiButton(item[x].name);


            System.out.println(x+item[x].name +" @raiting = "+item[x].raiting);
             String s;
            if(item[x].price_leve!=null) {
                s = "Miles=" + item[x].distance + " cost=" + item[x].price_leve + item[x].raiting + "/5 *";
                if (item[x].raiting == null) {
                    s = "Miles=" + item[x].distance + " cost=" + item[x].price_leve + "no raiting";
                }
            }
            else
            {
                System.out.println("this is the raiting"+item[x].raiting);
                 s = "Miles=" + item[x].distance +"  " + item[x].raiting + "/5 *";
                if (item[x].raiting.equals("")) {
                    s = "Miles=" + item[x].distance + " " + "no raiting";
                }
            }

            String b = " "+item[x].lng+"*";

            distance.setTextLine2(s);
            distance.setTextLine3("reviews");
            System.out.println(s);
            Container cnt = new Container(new com.codename1.ui.layouts.FlowLayout());
            cnt.setLayout(new GridLayout(1,1));

            try {
                System.out.println("WOWWWWWWWWWWWWWWvvvvvvvvvvvvvvvvvvvvvFfWWWWWWWWWWWWWWWWWWWWWWWWWWWW");
                Slider starSlider = createStarRankSlider();
                System.out.println( (int) ((Double.parseDouble(item[x].raiting)/5)*100)  );
                starSlider.setProgress((int) ((Double.parseDouble(item[x].raiting)/5)*100));
                list.add(FlowLayout.encloseCenter(starSlider));

            }
            catch(Exception err) {


                Log.e(err);
            }


            cnt.add(distance);
            list.add(cnt);
            final int w= x;//Integer.parseInt(item[x].price_leve);
            distance.addActionListener( e -> {searchreview(item[w].place_id,item[w]);} );

        }


        plumberlist.add(BorderLayout.CENTER,list);
        plumberlist.setScrollable(true);
    }
    /*
    public void makePlumber2( )
    {

        plumberlist = new Form("NEW PLUMBER!!!", new BorderLayout());
        Plumber[] restaurants= searchPlumber();

       // Place[] item= restaurants;
        String[] abc =new String[restaurants.length];
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!THIS IS HOW MANY Plumbers"+restaurants.length);
        for(int x=0;x<restaurants.length;x++)
        {
            System.out.println(restaurants[x].name);

            abc[x]=restaurants[x].name;
        }
System.out.println("test");
        //getData();
        Container list = new Container(BoxLayout.y());
        list.setScrollableY(true);
        for(int x=0;x<restaurants.length;x++) {
          //  Container c = new Container();
          //  c.setLayout(new GridLayout(1,1));
            MultiButton distance = new MultiButton(restaurants[x].name);
            String s="";
            System.out.println(x+restaurants[x].name);
           // Label l = new Label(x+"");
            //https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=CnRtAAAATLZNl354RwP_9UKbQ_5Psy40texXePv4oAlgP4qNEkdIrkyse7rPXYGd9D_Uj1rVsQdWT4oRz4QrYAJNpFX7rzqqMlZw2h2E2y5IKMUZ7ouD_SlcHxYq1yL4KbKUv3qtWgTK0A6QbGh87GB3sscrHRIQiG2RrmU_jF4tENr9wGS_YxoUSSDrYjWmrNfeEHSGSc3FyhNLlBU&key=YOUR_API_KEY

      //      loadPic("https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference="CnRtAAAATLZNl354RwP_9UKbQ_5Psy40texXePv4oAlgP4qNEkdIrkyse7rPXYGd9D_Uj1rVsQdWT4oRz4QrYAJNpFX7rzqqMlZw2h2E2y5IKMUZ7ouD_SlcHxYq1yL4KbKUv3qtWgTK0A6QbGh87GB3sscrHRIQiG2RrmU_jF4tENr9wGS_YxoUSSDrYjWmrNfeEHSGSc3FyhNLlBU&key=YOUR_API_KEY
//);

            loadPic(restaurants[x].photos);

                s = "Miles=" + restaurants[x].distance +  " " + restaurants[x].raiting + "/5";
                if(restaurants[x].raiting==null)
                {
                    s = "Miles=" + restaurants[x].distance +  " "+restaurants[x].place_id ;

                }



            String b = " "+restaurants[x].distance+"*";

          distance.setTextLine2(s);
          distance.setTextLine3("reviews");
          distance.setIcon(pic);
        //  distance.add(FlowLayout.encloseCenter(createStarRankSlider()));
         //   distance.setTextLine2(b);


            System.out.println(s);
      // Button  distance = new Button(s);



System.out.println("test"+distance.toString());
//b.setSize(new Dimension(100,200));

            Container cnt = new Container(new com.codename1.ui.layouts.FlowLayout());
            cnt.setLayout(new GridLayout(1,1));


            // cnt.add(BorderLayout.WEST,l);
            //cnt.add(BorderLayout.EAST,b);
         //   cnt.add(l);
            cnt.add(distance);

        try {
            System.out.println("WOWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW");
            Slider starSlider = createStarRankSlider();
            System.out.println( (int) ((Double.parseDouble(restaurants[x].raiting)/5)*100)  );
            starSlider.setProgress((int) ((Double.parseDouble(restaurants[x].raiting)/5)*100));
            list.add(FlowLayout.encloseCenter(starSlider));

        }
        catch(Exception err) {


            Log.e(err);
        }
            list.add(cnt);

            // b.addActionListener(e -> Log.p("You picked: " + b.getText()));

            try {
                final int w = x;
              //  distance.addActionListener(e -> Dialog.show("TEST","cost="+w,"Done",null));
                System.out.println("REVIEW SERCH");
                distance.addActionListener(e -> {searchreview(restaurants[w].place_id,restaurants[w]);} );//phoneSearch(myplace[w].place_id);});


            }
            catch(Exception err) {


                Log.e(err);
            }
           //distance.addActionListener(e -> Dialog.show("TEST","cost="+w,"Done",null));


        }


        //hi.addComponent(list);
        plumberlist.add(BorderLayout.CENTER,list);
        plumberlist.setScrollable(true);
        // hi.addComponent(new Label("four"));
        //plumberlist.show();
      //  searchreview("ChIJ6wIYtHJ844kRcR2NlY3yUoc");

    }
    */
    public void makePizza(Place[] restaurants )
    {

        pizzalist = new Form("restaurant!!!", new BorderLayout());


        // Place[] item= restaurants;
        String[] abc =new String[restaurants.length];
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!THIS IS HOW MANY RESTRONTS"+restaurants.length);
        for(int x=0;x<restaurants.length;x++)
        {
            abc[x]=restaurants[x].name;
        }

        //getData();
        Container list = new Container(BoxLayout.y());
        list.setScrollableY(true);
        for(int x=0;x<restaurants.length;x++) {
            //  Container c = new Container();
            //  c.setLayout(new GridLayout(1,1));
            MultiButton distance = new MultiButton(restaurants[x].name);
            String s="";
            System.out.println(x+restaurants[x].name);
            // Label l = new Label(x+"");
            //https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=CnRtAAAATLZNl354RwP_9UKbQ_5Psy40texXePv4oAlgP4qNEkdIrkyse7rPXYGd9D_Uj1rVsQdWT4oRz4QrYAJNpFX7rzqqMlZw2h2E2y5IKMUZ7ouD_SlcHxYq1yL4KbKUv3qtWgTK0A6QbGh87GB3sscrHRIQiG2RrmU_jF4tENr9wGS_YxoUSSDrYjWmrNfeEHSGSc3FyhNLlBU&key=YOUR_API_KEY

            //      loadPic("https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference="CnRtAAAATLZNl354RwP_9UKbQ_5Psy40texXePv4oAlgP4qNEkdIrkyse7rPXYGd9D_Uj1rVsQdWT4oRz4QrYAJNpFX7rzqqMlZw2h2E2y5IKMUZ7ouD_SlcHxYq1yL4KbKUv3qtWgTK0A6QbGh87GB3sscrHRIQiG2RrmU_jF4tENr9wGS_YxoUSSDrYjWmrNfeEHSGSc3FyhNLlBU&key=YOUR_API_KEY
//);

           // loadPic(restaurants[x].photos);
            if(!restaurants[x].price_leve.equals("na")) {
                int ee= (int)Double.parseDouble( restaurants[x].price_leve);
                String ss="";
                for(int rr= 0;rr<ee;rr++)
                {
                    ss+="$";
                }

                s = "Miles=" + restaurants[x].distance + ss+ " " + restaurants[x].raiting + "/5";
            }
            else
            {
                s = "Miles=" + restaurants[x].distance +  " " + restaurants[x].raiting + "/5";


            }
            String b = " "+restaurants[x].distance+"*";

            distance.setTextLine2(s);
            distance.setTextLine3("reviews");
            distance.setIcon(pic);
            //  distance.add(FlowLayout.encloseCenter(createStarRankSlider()));
            //   distance.setTextLine2(b);


            System.out.println(s);
            // Button  distance = new Button(s);



            System.out.println("test"+distance.toString());
//b.setSize(new Dimension(100,200));

            Container cnt = new Container(new com.codename1.ui.layouts.FlowLayout());
            cnt.setLayout(new GridLayout(1,1));


            // cnt.add(BorderLayout.WEST,l);
            //cnt.add(BorderLayout.EAST,b);
            //   cnt.add(l);
            cnt.add(distance);

            try {
                System.out.println("WOWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW");
                Slider starSlider = createStarRankSlider();
                System.out.println( (int) ((Double.parseDouble(myplace[x].raiting)/5)*100)  );
                starSlider.setProgress((int) ((Double.parseDouble(myplace[x].raiting)/5)*100));
                list.add(FlowLayout.encloseCenter(starSlider));

            }
            catch(Exception err) {


                Log.e(err);
            }
            list.add(cnt);

            // b.addActionListener(e -> Log.p("You picked: " + b.getText()));

            try {
                final int w = x;
                //  distance.addActionListener(e -> Dialog.show("TEST","cost="+w,"Done",null));
                distance.addActionListener(e -> {searchreview(myplace[w].place_id,myplace[w]);} );//phoneSearch(myplace[w].place_id);});


            }
            catch(Exception err) {


                Log.e(err);
            }
            //distance.addActionListener(e -> Dialog.show("TEST","cost="+w,"Done",null));


        }


        //hi.addComponent(list);
        pizzalist.add(BorderLayout.CENTER,list);
        pizzalist.setScrollable(true);
        // hi.addComponent(new Label("four"));
        //plumberlist.show();
        //  searchreview("ChIJ6wIYtHJ844kRcR2NlY3yUoc");

    }
    public void makeDel(Place[] restaurants )
    {

        dellist = new Form("restaurant!!!", new BorderLayout());


        // Place[] item= restaurants;
        String[] abc =new String[restaurants.length];
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!THIS IS HOW MANY RESTRONTS"+restaurants.length);
        for(int x=0;x<restaurants.length;x++)
        {
            abc[x]=restaurants[x].name;
        }

        //getData();
        Container list = new Container(BoxLayout.y());
        list.setScrollableY(true);
        for(int x=0;x<restaurants.length;x++) {
            //  Container c = new Container();
            //  c.setLayout(new GridLayout(1,1));
            MultiButton distance = new MultiButton(restaurants[x].name);
            String s="";
            System.out.println(x+restaurants[x].name);
            // Label l = new Label(x+"");
            //https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=CnRtAAAATLZNl354RwP_9UKbQ_5Psy40texXePv4oAlgP4qNEkdIrkyse7rPXYGd9D_Uj1rVsQdWT4oRz4QrYAJNpFX7rzqqMlZw2h2E2y5IKMUZ7ouD_SlcHxYq1yL4KbKUv3qtWgTK0A6QbGh87GB3sscrHRIQiG2RrmU_jF4tENr9wGS_YxoUSSDrYjWmrNfeEHSGSc3FyhNLlBU&key=YOUR_API_KEY

            //      loadPic("https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference="CnRtAAAATLZNl354RwP_9UKbQ_5Psy40texXePv4oAlgP4qNEkdIrkyse7rPXYGd9D_Uj1rVsQdWT4oRz4QrYAJNpFX7rzqqMlZw2h2E2y5IKMUZ7ouD_SlcHxYq1yL4KbKUv3qtWgTK0A6QbGh87GB3sscrHRIQiG2RrmU_jF4tENr9wGS_YxoUSSDrYjWmrNfeEHSGSc3FyhNLlBU&key=YOUR_API_KEY
//);

            // loadPic(restaurants[x].photos);
            if(!restaurants[x].price_leve.equals("na")) {
                int ee= (int)Double.parseDouble( restaurants[x].price_leve);
                String ss="";
                for(int rr= 0;rr<ee;rr++)
                {
                    ss+="$";
                }

                s = "Miles=" + restaurants[x].distance + ss+ " " + restaurants[x].raiting + "/5";
            }
            else
            {
                s = "Miles=" + restaurants[x].distance +  " " + restaurants[x].raiting + "/5";


            }
            String b = " "+restaurants[x].distance+"*";

            distance.setTextLine2(s);
            distance.setTextLine3("reviews");
            distance.setIcon(pic);
            //  distance.add(FlowLayout.encloseCenter(createStarRankSlider()));
            //   distance.setTextLine2(b);


            System.out.println(s);
            // Button  distance = new Button(s);



            System.out.println("test"+distance.toString());
//b.setSize(new Dimension(100,200));

            Container cnt = new Container(new com.codename1.ui.layouts.FlowLayout());
            cnt.setLayout(new GridLayout(1,1));


            // cnt.add(BorderLayout.WEST,l);
            //cnt.add(BorderLayout.EAST,b);
            //   cnt.add(l);
            cnt.add(distance);

            try {
                System.out.println("WOWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW");
                Slider starSlider = createStarRankSlider();
                System.out.println( (int) ((Double.parseDouble(myplace[x].raiting)/5)*100)  );
                starSlider.setProgress((int) ((Double.parseDouble(myplace[x].raiting)/5)*100));
                list.add(FlowLayout.encloseCenter(starSlider));

            }
            catch(Exception err) {


                Log.e(err);
            }
            list.add(cnt);

            // b.addActionListener(e -> Log.p("You picked: " + b.getText()));

            try {
                final int w = x;
                //  distance.addActionListener(e -> Dialog.show("TEST","cost="+w,"Done",null));
                distance.addActionListener(e -> {searchreview(myplace[w].place_id,myplace[w]);} );//phoneSearch(myplace[w].place_id);});


            }
            catch(Exception err) {


                Log.e(err);
            }
            //distance.addActionListener(e -> Dialog.show("TEST","cost="+w,"Done",null));


        }


        //hi.addComponent(list);
        dellist.add(BorderLayout.CENTER,list);
        dellist.setScrollable(true);
        // hi.addComponent(new Label("four"));
        //plumberlist.show();
        //  searchreview("ChIJ6wIYtHJ844kRcR2NlY3yUoc");

    }


    public void makeGas(Place[] gas )
    {

        gasList = new Form("restaurant!!!", new BorderLayout());


        // Place[] item= restaurants;
        String[] abc =new String[gas.length];
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!THIS IS HOW MANY RESTRONTS"+gas.length);
        for(int x=0;x<gas.length;x++)
        {
            abc[x]=gas[x].name;
        }

        //getData();
        Container list = new Container(BoxLayout.y());
        list.setScrollableY(true);
        for(int x=0;x<gas.length;x++) {
            //  Container c = new Container();
            //  c.setLayout(new GridLayout(1,1));
            MultiButton distance = new MultiButton(gas[x].name);

            System.out.println(x+gas[x].name);
            // Label l = new Label(x+"");
            String s ="Miles="+ gas[x].distance+" cost="+gas[x].price_leve +" "+gas[x].raiting+"/5" ;
            String b = " "+gas[x].distance+"*";

            distance.setTextLine2(s);
            distance.setTextLine3("reviews");
            //  distance.add(FlowLayout.encloseCenter(createStarRankSlider()));
            //   distance.setTextLine2(b);


            System.out.println(s);
            // Button  distance = new Button(s);



            System.out.println("test"+distance.toString());
//b.setSize(new Dimension(100,200));

            Container cnt = new Container(new com.codename1.ui.layouts.FlowLayout());
            cnt.setLayout(new GridLayout(1,1));


            // cnt.add(BorderLayout.WEST,l);
            //cnt.add(BorderLayout.EAST,b);
            //   cnt.add(l);
            cnt.add(distance);

            try {
                System.out.println("WOWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW");
                Slider starSlider = createStarRankSlider();
                System.out.println( (int) ((Double.parseDouble(myplace[x].raiting)/5)*100)  );
                starSlider.setProgress((int) ((Double.parseDouble(myplace[x].raiting)/5)*100));
                list.add(FlowLayout.encloseCenter(starSlider));
                list.add(cnt);
            }
            catch(Exception err) {


                Log.e(err);
            }

            // b.addActionListener(e -> Log.p("You picked: " + b.getText()));

            try {
                final int w = x;
                //  distance.addActionListener(e -> Dialog.show("TEST","cost="+w,"Done",null));
                distance.addActionListener(e -> {searchreview(myplace[w].place_id,myplace[w]);});


            }
            catch(Exception err) {


                Log.e(err);
            }
            //distance.addActionListener(e -> Dialog.show("TEST","cost="+w,"Done",null));


        }


        //hi.addComponent(list);
        gasList.add(BorderLayout.CENTER,list);
        gasList.setScrollable(true);
        // hi.addComponent(new Label("four"));
        //plumberlist.show();
        //  searchreview("ChIJ6wIYtHJ844kRcR2NlY3yUoc");

    }
    public void showOneTypeOfVendor(String n)
    {
        System.out.println(n+ "SHOW VEN");
        if(n.equalsIgnoreCase("plumber"))
        {
            plumberlist.show();
        }
        if(n.equalsIgnoreCase("Tow"))
        {
            towlist.show();
        }
        if(n.equalsIgnoreCase("restaurant"))
        {
            pizzalist.show();
        }
        if(n.equalsIgnoreCase("Police"))
        {
            makePhonecall();
        }
        if(n.equalsIgnoreCase("Electrician"))
        {

            electricianlist.show();
        }
        if(n.equalsIgnoreCase("Meal delivery"))
        {
            System.out.println("meal del has been clicked");
            dellist.show();
        }









    }
    public void searchLocations() {
        try {
            System.out.println("serchlocationrecal");
            ConnectionRequest r = new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json", false);
            r.setPost(false);
            r.addArgument("pagetoken",pagetoken);
            NetworkManager.getInstance().addToQueueAndWait(r);
            System.out.println("@searLocation2@");




            Map<String,Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
           // System.out.println(result.toString());

        }catch(Exception err) {
            Log.e(err);
        }
    }

    // id
    //ChIJF_YysDp844kRA527Rc_PfQE, reference=CmRRAAAA2R1yq8MbKveT12oN_3vy3zhg4LsXOREGqBadTB38GAh0TE79wTzQNVsld2eUJrAI51RdazO5drasiEmVeyuCcnNDMF_1wCD5XJnQHMVE-JkbdnLSg6sg2KdJBl1mWpMgEhBcqkyj1CzIk3vNKqpjwSTfGhSAU0UpyscpANgKOXE3OizWy1SGZg

    public String phoneSearch(String id) {
        try {

            ConnectionRequest r = new ConnectionRequest("https://maps.googleapis.com/maps/api/place/details/json", false);
            r.setPost(false);

            r.addArgument("placeid", id);
            r.addArgument("key", "AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");//apiKey.getText());
            System.out.println("searLocation**");
            NetworkManager.getInstance().addToQueueAndWait(r);
            System.out.println("getPHONE**");


            Map<String, Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
            System.out.println(result.toString());
            LinkedHashMap allItems = new LinkedHashMap();
            System.out.println("wow");
            allItems = (LinkedHashMap) result.get("result");
            System.out.println(allItems.get("formatted_address"));
            System.out.println(allItems.toString());
        }
        catch(Exception err) {
            Log.e(err);
        }
    return null;
        }


    public String[] searchreview(String id, Place serchPlace) {
        try {
            if (id.length() > 0) {
                ConnectionRequest r = new ConnectionRequest("https://maps.googleapis.com/maps/api/place/details/json", false);
                r.setPost(false);

                r.addArgument("placeid", id);

                // -33.8670522,151.1957362
                //42.2578355, -71.07300930000002
                //  r.addArgument("radius", "5000");
                // r.addArgument("types", "doctor");
                //   r.addArgument("type", "restaurant");
                // r.addArgument("keyword","restaurant");
                //  r.addArgument("rankby", "distance");
                //  r.addArgument("opennow ","true");

                //rankby=distance
System.out.println("wow I am sick of this");

                //     String key="My Key";
                ////   req.addArgument("key", key);
                //   NetworkManager.getInstance().addToQueue(req);


                r.addArgument("key", "AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");//apiKey.getText());
                //AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A
                //AIzaSyAy7TIKVgOqkWQpaq3iQn5T0E38hQtfxCs
                //   r.addArgument("input", text);
                //    r= new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A", false);


                System.out.println("searLocation**");
                NetworkManager.getInstance().addToQueueAndWait(r);
                System.out.println("searLocation2**");


                Map<String, Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
                System.out.println(result.toString());
                LinkedHashMap allItems = new LinkedHashMap();

                allItems =(LinkedHashMap) result.get("result");
                System.out.println(allItems.toString());


                String typesPhone =(String) allItems.get("formatted_phone_number");
                System.out.println("wqws"+typesPhone.toString());
                ArrayList s =(ArrayList) allItems.get("reviews");
                try {
                    if (s.size() == 0) {
                        s= new ArrayList();
                        LinkedHashMap link = new LinkedHashMap();
                        link.put("text","NOT WAY");
                        s.add(link);
                    }
                }
                catch (NullPointerException e)
                {
                    s= new ArrayList();

                    LinkedHashMap link = new LinkedHashMap();
                    link.put("text", new String("no review"));
                    //link.put("text","NOT WAY");
                     s.add(link);

                }
            System.out.println(s.toString());
            reviewList= new Form("ReviewList!!", new BorderLayout());
                setBackCommand(reviewList);
                System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%");
                Container list = new Container(BoxLayout.y());
                list.setScrollableY(true);
            for(int w=0;w<s.size();w++) {
             //  System.out.println("myW"+s.get(w));
                LinkedHashMap testReview = (LinkedHashMap) s.get(w);


                TextArea distance = new TextArea(testReview.get("text")+"");
                distance.setEditable(false);
                distance.setFocusable(false);
                distance.setUIID("Label");
                Container cnt = new Container(new com.codename1.ui.layouts.FlowLayout());
             //   cnt.setLayout(new GridLayout(1,1));


                // cnt.add(BorderLayout.WEST,l);
                //cnt.add(BorderLayout.EAST,b);
                //   cnt.add(l);
        //        cnt.add(distance);



                list.add(distance);
                list.add(new Label("____________________________________________"));
            }

              //  System.out.println(s.get(0));
                if(s.size()==0)
                {
                    list.add(new Label("NO REVIEWS"));
                }
                rr= new Button(serchPlace.name+":"+typesPhone);
                rr.addActionListener(e->{
                    // cnt.setCameraPosition(new Coord(42.2578355, -71.07300930000002));
                    Display.getInstance().dial(typesPhone);

                });

                reviewList.add(BorderLayout.NORTH,rr);
                reviewList.add(BorderLayout.CENTER,list);
                reviewList.setScrollable(true);
            }
            reviewList.show();
            return null;
        }catch(Exception err) {
            Log.e(err);
        }
        return null;
    }


    public String[] searchLocations(String text) {
        String rat="0";
        String prc="9";
        try {
            if(text.length() > 0) {
                ConnectionRequest r = new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json", false);
                r.setPost(false);
              //  r.setUrl("https://maps.googleapis.com/maps/api/place/autocomplete/json");
               //r.setUrl("https://maps.googleapis.com/maps/api/place/nearbysearch/json");
               // https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=YOUR_API_KEY
  //              r.setUrl("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");

                // r.addArgument("location", "-33.8670522,151.1957362");
              //  r.addArgument("location", "42.2578355,-71.07300930000002");
                r.addArgument("location", myLat+","+myLng);


                // -33.8670522,151.1957362
                //42.2578355, -71.07300930000002
               //r.addArgument("radius", "5000");
               // r.addArgument("types", "doctor");
             r.addArgument("type", "restaurant|cafe|bar");
                //r.addArgument("keyword","restaurant");
                r.addArgument("rankby", "distance");
                r.addArgument("opennow","true");


                //rankby=distance


           //     String key="My Key";
             ////   req.addArgument("key", key);
             //   NetworkManager.getInstance().addToQueue(req);



                r.addArgument("key", "AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");//apiKey.getText());
                //AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A
                //AIzaSyAy7TIKVgOqkWQpaq3iQn5T0E38hQtfxCs
            //   r.addArgument("input", text);
            //    r= new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A", false);


                System.out.println("searLocation");
                NetworkManager.getInstance().addToQueueAndWait(r);
                System.out.println("searLocation2");




                Map<String,Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
                System.out.println(result.toString());
             //**********************
                /*
                System.out.println("JSONSTART");
                JSONObject  JSNresult=new JSONObject( new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8")));
                System.out.println(JSNresult.toString());
                System.out.println(JSNresult.getString("results"));
                JSONObject one= JSNresult.getJSONObject((JSONObject)(JSNresult.getString("results")));
                System.out.println(one.toString());
                System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

*/





                //*************************
               // String[] res = Result.fromContent(result).getAsStringArray("//results");
                LinkedHashMap allItems = new LinkedHashMap();
                 pagetoken= (String ) result.get("next_page_token");

                ArrayList s = (ArrayList) result.get("results");
                String[] arrS = new String[s.size()];
                 myplace = new Place[s.size()];
                 System.out.println("this is how many resutls I have "+s.size());

                for (int x = 0; x < s.size(); x++) {
                    LinkedHashMap newItems = (LinkedHashMap) s.get(x);
                    System.out.println(newItems.toString());
                    System.out.println("OPEN NOW#####");
                    System.out.println(newItems.get("opening_hours"));
                    Set set = newItems.entrySet();

                    // Get an iterator
                    Iterator i = set.iterator();
                    int counter=0;
                    // Display elements
                    counter=0;
                    String[] input= new String[13];
                    while(i.hasNext()) {
                        Map.Entry me = (Map.Entry)i.next();
                        System.out.print(me.getKey() + ": ");

                        System.out.println(me.getValue());
                        input[counter]=(String)me.getValue().toString();
                        System.out.println(counter++);
                        if(me.getKey().equals("rating"))
                        {

                           rat=me.getValue()+"";

                        }
                        if(me.getKey().equals("price_level"))
                        {

                            prc=me.getValue()+"";

                        }
                    }
                    if(prc.equals("9"))
                    {
                        prc="na";
                    }
                    myplace[x]= new Place(input[0],input[1],input[2],input[3],input[4],input[5],input[6],prc,rat,input[9],input[10],input[11],myLat,myLng);
                    myplace[x].lat2=myLat;
                    myplace[x].lng2=myLng;

                    System.out.println(myplace[x].place_id);
                    System.out.println("NAME!!");

                    System.out.println(newItems.get("name"));
                    System.out.println("geometry!!");
                    System.out.println(newItems.get("geometry"));
                    /*
                    Map<String,Object> Geo=(Map)newItems.get("geometry");
                    Map<String,Object> location=(Map)Geo.get("location");
                    Map<String,Object> open=(Map)Geo.get("opening_hours");
                    System.out.println(open.toString());

                    //double lat=(double)newItems.get("lat");
                    System.out.println("*location*"+location.toString());
                    double lat=(double)location.get("lat");
                    double lng=(double)location.get("lng");
                    System.out.println("lat="+lat);
                    System.out.println("longitude="+lng);
                    System.out.println("wow"+Geo.get("location"));
                    */
                    //  String ss = newItems.get("name") + "";
                  //  ss = ss.substring(5, ss.length());
                 //   AllItems[x] = new Plumber(ss, (double) newItems.get("cost"), .1, .1);
                    // arrS[x]=newItems.get("name")+"";
                   // arrS[x] = ss;
                }

                for(int x=0;x<myplace.length;x++)
                {
                    System.out.println("myplace"+x);
                    myplace[x].print();
                }



                return null;
            }
        } catch(Exception err) {
            Log.e(err);
        }
       // searchLocations();
        return null;
    }
    /**
    /Search for delivery
    /
     **/
    public String[] searchDelievery(String text) {
        String rat="0";
        String prc="9";
        try {
            if(text.length() > 0) {
                ConnectionRequest r = new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json", false);
                r.setPost(false);
                //  r.setUrl("https://maps.googleapis.com/maps/api/place/autocomplete/json");
                //r.setUrl("https://maps.googleapis.com/maps/api/place/nearbysearch/json");
                // https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=YOUR_API_KEY
                //              r.setUrl("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");

                // r.addArgument("location", "-33.8670522,151.1957362");
                //  r.addArgument("location", "42.2578355,-71.07300930000002");
                r.addArgument("location", myLat+","+myLng);


                // -33.8670522,151.1957362
                //42.2578355, -71.07300930000002
                //r.addArgument("radius", "5000");
                // r.addArgument("types", "doctor");
                r.addArgument("type", "meal_delivery");
                //r.addArgument("keyword","restaurant");
                r.addArgument("rankby", "distance");
                r.addArgument("opennow","true");


                //rankby=distance


                //     String key="My Key";
                ////   req.addArgument("key", key);
                //   NetworkManager.getInstance().addToQueue(req);



                r.addArgument("key", "AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");//apiKey.getText());
                //AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A
                //AIzaSyAy7TIKVgOqkWQpaq3iQn5T0E38hQtfxCs
                //   r.addArgument("input", text);
                //    r= new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A", false);


                System.out.println("searLocation");
                NetworkManager.getInstance().addToQueueAndWait(r);
                System.out.println("searLocation2");




                Map<String,Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
                System.out.println(result.toString());
                //**********************
                /*
                System.out.println("JSONSTART");
                JSONObject  JSNresult=new JSONObject( new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8")));
                System.out.println(JSNresult.toString());
                System.out.println(JSNresult.getString("results"));
                JSONObject one= JSNresult.getJSONObject((JSONObject)(JSNresult.getString("results")));
                System.out.println(one.toString());
                System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

*/





                //*************************
                // String[] res = Result.fromContent(result).getAsStringArray("//results");
                LinkedHashMap allItems = new LinkedHashMap();
                pagetoken= (String ) result.get("next_page_token");

                ArrayList s = (ArrayList) result.get("results");
                String[] arrS = new String[s.size()];
                delplace = new Place[s.size()];
                System.out.println("this is how many resutls I have "+s.size());

                for (int x = 0; x < s.size(); x++) {
                    LinkedHashMap newItems = (LinkedHashMap) s.get(x);
                    System.out.println(newItems.toString());
                    System.out.println("OPEN NOW#####");
                    System.out.println(newItems.get("opening_hours"));
                    Set set = newItems.entrySet();

                    // Get an iterator
                    Iterator i = set.iterator();
                    int counter=0;
                    // Display elements
                    counter=0;
                    String[] input= new String[13];
                    while(i.hasNext()) {
                        Map.Entry me = (Map.Entry)i.next();
                        System.out.print(me.getKey() + ": ");

                        System.out.println(me.getValue());
                        input[counter]=(String)me.getValue().toString();
                        System.out.println(counter++);
                        if(me.getKey().equals("rating"))
                        {

                            rat=me.getValue()+"";

                        }
                        if(me.getKey().equals("price_level"))
                        {

                            prc=me.getValue()+"";

                        }
                    }
                    if(prc.equals("9"))
                    {
                        prc="na";
                    }
                    delplace[x]= new Place(input[0],input[1],input[2],input[3],input[4],input[5],input[6],prc,rat,input[9],input[10],input[11],myLat,myLng);
                    delplace[x].lat2=myLat;
                    delplace[x].lng2=myLng;

                    System.out.println(delplace[x].place_id);
                    System.out.println("NAME!!");

                    System.out.println(newItems.get("name"));
                    System.out.println("geometry!!");
                    System.out.println(newItems.get("geometry"));
                    /*
                    Map<String,Object> Geo=(Map)newItems.get("geometry");
                    Map<String,Object> location=(Map)Geo.get("location");
                    Map<String,Object> open=(Map)Geo.get("opening_hours");
                    System.out.println(open.toString());

                    //double lat=(double)newItems.get("lat");
                    System.out.println("*location*"+location.toString());
                    double lat=(double)location.get("lat");
                    double lng=(double)location.get("lng");
                    System.out.println("lat="+lat);
                    System.out.println("longitude="+lng);
                    System.out.println("wow"+Geo.get("location"));
                    */
                    //  String ss = newItems.get("name") + "";
                    //  ss = ss.substring(5, ss.length());
                    //   AllItems[x] = new Plumber(ss, (double) newItems.get("cost"), .1, .1);
                    // arrS[x]=newItems.get("name")+"";
                    // arrS[x] = ss;
                }

                for(int x=0;x<delplace.length;x++)
                {
                    System.out.println("delplace"+x);
                    delplace[x].print();
                }



                return null;
            }
        } catch(Exception err) {
            Log.e(err);
        }
        // searchLocations();
        return null;
    }

    /************8
     *
     * try to make elect
     * @return
     */
    public Electrician[] searchElect() {
        String rat="0";
        String prc="9";
        try {

            ConnectionRequest r = new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json", false);
            r.setPost(false);
            //  r.setUrl("https://maps.googleapis.com/maps/api/place/autocomplete/json");
            //r.setUrl("https://maps.googleapis.com/maps/api/place/nearbysearch/json");
            // https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=YOUR_API_KEY
            //              r.setUrl("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");

            // r.addArgument("location", "-33.8670522,151.1957362");
            //  r.addArgument("location", "42.2578355,-71.07300930000002");
            r.addArgument("location", myLat+","+myLng);


            // -33.8670522,151.1957362
            //42.2578355, -71.07300930000002
            //r.addArgument("radius", "5000");
            // r.addArgument("types", "electrician");
            r.addArgument("type", "electrician");
            //r.addArgument("keyword","restaurant");
            r.addArgument("rankby", "distance");
            //  r.addArgument("opennow","true");


            //rankby=distance


            //     String key="My Key";
            ////   req.addArgument("key", key);
            //   NetworkManager.getInstance().addToQueue(req);



            r.addArgument("key", "AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");//apiKey.getText());
            //AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A
            //AIzaSyAy7TIKVgOqkWQpaq3iQn5T0E38hQtfxCs
            //   r.addArgument("input", text);
            //    r= new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A", false);


            System.out.println("searLocation");
            NetworkManager.getInstance().addToQueueAndWait(r);
            System.out.println("searLocation2");




            Map<String,Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
            System.out.println(result.toString());
            //**********************
                /*
                System.out.println("JSONSTART");
                JSONObject  JSNresult=new JSONObject( new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8")));
                System.out.println(JSNresult.toString());
                System.out.println(JSNresult.getString("results"));
                JSONObject one= JSNresult.getJSONObject((JSONObject)(JSNresult.getString("results")));
                System.out.println(one.toString());
                System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

*/





            //*************************
            // String[] res = Result.fromContent(result).getAsStringArray("//results");
            LinkedHashMap allItems = new LinkedHashMap();
            pagetoken= (String ) result.get("next_page_token");

            ArrayList s = (ArrayList) result.get("results");
            String[] arrS = new String[s.size()];
            myElect = new Electrician[s.size()];
            System.out.println("this is how many ELECT resutls I have "+s.size());

            for (int x = 0; x < s.size(); x++) {
                LinkedHashMap newItems = (LinkedHashMap) s.get(x);
                System.out.println(newItems.toString());
                System.out.println("OPEN NOW#####");
                System.out.println(newItems.get("opening_hours"));
                Set set = newItems.entrySet();

                // Get an iterator
                Iterator i = set.iterator();
                int counter=0;
                // Display elements
                counter=0;
                String[] input= new String[13];
                System.out.println("THIS IS Electrician");
                String raiting="",icon="",name="",reference="",scope="",types="",vicinity="";
                while(i.hasNext()) {
                    Map.Entry me = (Map.Entry)i.next();

                    System.out.print(me.getKey() + ": ");

                    System.out.println(me.getValue());
                    input[counter]=(String)me.getValue().toString();
                    System.out.println(counter++);
                    if(me.getKey().equals("icon"))
                    {
                        icon=me.getValue()+"";
                    }
                    if(me.getKey().equals("name"))
                    {
                        name=me.getValue()+"";
                    }
                    if(me.getKey().equals("reference"))
                    {
                        reference=me.getValue()+"";
                    }
                    if(me.getKey().equals("scope"))
                    {
                        scope=me.getValue()+"";
                    }
                    if(me.getKey().equals("types"))
                    {
                        types=me.getValue()+"";
                    }
                    if(me.getKey().equals("vivinity"))
                    {
                        vicinity=me.getValue()+"";
                    }

                    if(me.getKey().equals("place_id"))
                    {

                        id=me.getValue()+"";

                    }
                    if(me.getKey().equals("price_level"))
                    {

                        prc=me.getValue()+"";

                    }
                    if(me.getKey().equals("rating"))
                    {
                        raiting=me.getValue()+"";



                    }
                }
                if(prc.equals("9"))
                {
                    prc="na";
                }
                myElect[x]= new Electrician(raiting,input[0],icon,id,name,id,reference,scope,types,vicinity,myLat,myLng);
                myElect[x].lat2=myLat;
                myElect[x].lng2=myLng;

                System.out.println(myElect[x].place_id);
                System.out.println("NAME!!");

                System.out.println(newItems.get("name"));
                System.out.println("geometry!!");
                System.out.println(newItems.get("geometry"));
                    /*
                    Map<String,Object> Geo=(Map)newItems.get("geometry");
                    Map<String,Object> location=(Map)Geo.get("location");
                    Map<String,Object> open=(Map)Geo.get("opening_hours");
                    System.out.println(open.toString());

                    //double lat=(double)newItems.get("lat");
                    System.out.println("*location*"+location.toString());
                    double lat=(double)location.get("lat");
                    double lng=(double)location.get("lng");
                    System.out.println("lat="+lat);
                    System.out.println("longitude="+lng);
                    System.out.println("wow"+Geo.get("location"));
                    */
                //  String ss = newItems.get("name") + "";
                //  ss = ss.substring(5, ss.length());
                //   AllItems[x] = new Plumber(ss, (double) newItems.get("cost"), .1, .1);
                // arrS[x]=newItems.get("name")+"";
                // arrS[x] = ss;
            }

            for(int x=0;x<myElect.length;x++)
            {
                System.out.println("myPlumber"+x);
                myElect[x].print();
            }



            return myElect;

        } catch(Exception err) {
            Log.e(err);
        }
        // searchLocations();
        return myElect;
    }
    //*********************


    public Plumber[] searchPlumber() {
        String rat="0";
        String prc="9";
        try {

                ConnectionRequest r = new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json", false);
                r.setPost(false);
                //  r.setUrl("https://maps.googleapis.com/maps/api/place/autocomplete/json");
                //r.setUrl("https://maps.googleapis.com/maps/api/place/nearbysearch/json");
                // https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=YOUR_API_KEY
                //              r.setUrl("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");

                // r.addArgument("location", "-33.8670522,151.1957362");
                //  r.addArgument("location", "42.2578355,-71.07300930000002");
                r.addArgument("location", myLat+","+myLng);


                // -33.8670522,151.1957362
                //42.2578355, -71.07300930000002
                //r.addArgument("radius", "5000");
                // r.addArgument("types", "electrician");
                r.addArgument("type", "plumber");
                //r.addArgument("keyword","restaurant");
                r.addArgument("rankby", "distance");
              //  r.addArgument("opennow","true");


                //rankby=distance


                //     String key="My Key";
                ////   req.addArgument("key", key);
                //   NetworkManager.getInstance().addToQueue(req);



                r.addArgument("key", "AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A");//apiKey.getText());
                //AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A
                //AIzaSyAy7TIKVgOqkWQpaq3iQn5T0E38hQtfxCs
                //   r.addArgument("input", text);
                //    r= new ConnectionRequest("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=500&type=restaurant&keyword=cruise&key=AIzaSyBSJ3p52goDo_wVTYtU7nnHlY7ucZ7RP-A", false);



                NetworkManager.getInstance().addToQueueAndWait(r);





                Map<String,Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
                System.out.println(result.toString());
                //**********************
                /*
                System.out.println("JSONSTART");
                JSONObject  JSNresult=new JSONObject( new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8")));
                System.out.println(JSNresult.toString());
                System.out.println(JSNresult.getString("results"));
                JSONObject one= JSNresult.getJSONObject((JSONObject)(JSNresult.getString("results")));
                System.out.println(one.toString());
                System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

*/





                //*************************
                // String[] res = Result.fromContent(result).getAsStringArray("//results");
                LinkedHashMap allItems = new LinkedHashMap();
                pagetoken= (String ) result.get("next_page_token");

                ArrayList s = (ArrayList) result.get("results");
                String[] arrS = new String[s.size()];
                myPlumber = new Plumber[s.size()];
                System.out.println("this is how many resutls I have "+s.size());

                for (int x = 0; x < s.size(); x++) {
                    LinkedHashMap newItems = (LinkedHashMap) s.get(x);
                    System.out.println(newItems.toString());
                    System.out.println("OPEN NOW#####");
                    System.out.println(newItems.get("opening_hours"));
                    Set set = newItems.entrySet();

                    // Get an iterator
                    Iterator i = set.iterator();
                    int counter=0;
                    // Display elements
                    counter=0;
                    String[] input= new String[13];
                System.out.println("THIS IS PLUMBERDATA");
                 String raiting= "",icon="",name="",reference="",scope="",types="",vicinity="";
                    while(i.hasNext()) {
                        Map.Entry me = (Map.Entry)i.next();

                        System.out.print(me.getKey() + ": ");

                        System.out.println(me.getValue());
                        input[counter]=(String)me.getValue().toString();
                        System.out.println(counter++);
                        if(me.getKey().equals("icon"))
                        {
                            icon=me.getValue()+"";
                        }
                        if(me.getKey().equals("name"))
                        {
                            name=me.getValue()+"";
                            System.out.println("fried chicken");
                        }
                        if(me.getKey().equals("reference"))
                        {
                            reference=me.getValue()+"";
                        }
                        if(me.getKey().equals("scope"))
                        {
                            scope=me.getValue()+"";
                        }
                        if(me.getKey().equals("types"))
                        {
                            types=me.getValue()+"";
                        }
                        if(me.getKey().equals("vivinity"))
                        {
                            vicinity=me.getValue()+"";
                        }
                        if(me.getKey().equals("rating"))
                        {
                            raiting=me.getValue()+"";
                            System.out.println("THIS IS SETTING THE RAINTING FOR PLUMBER"+raiting);
                        }

                            if(me.getKey().equals("place_id"))
                        {

                            id=me.getValue()+"";

                        }
                        if(me.getKey().equals("price_level"))
                        {

                            prc=me.getValue()+"";

                        }
                    }
                    if(prc.equals("9"))
                    {
                        prc="na";
                    }

                    myPlumber[x]= new Plumber(raiting,input[0],icon,id,name,id,reference,scope,types,vicinity,myLat,myLng);
                    myPlumber[x].lat2=myLat;
                    myPlumber[x].lng2=myLng;

                    System.out.println(myPlumber[x].place_id);
                    System.out.println("NAME!!");

                    System.out.println(newItems.get("name"));
                    System.out.println("geometry!!");
                    System.out.println(newItems.get("geometry"));
                    /*
                    Map<String,Object> Geo=(Map)newItems.get("geometry");
                    Map<String,Object> location=(Map)Geo.get("location");
                    Map<String,Object> open=(Map)Geo.get("opening_hours");
                    System.out.println(open.toString());

                    //double lat=(double)newItems.get("lat");
                    System.out.println("*location*"+location.toString());
                    double lat=(double)location.get("lat");
                    double lng=(double)location.get("lng");
                    System.out.println("lat="+lat);
                    System.out.println("longitude="+lng);
                    System.out.println("wow"+Geo.get("location"));
                    */
                    //  String ss = newItems.get("name") + "";
                    //  ss = ss.substring(5, ss.length());
                    //   AllItems[x] = new Plumber(ss, (double) newItems.get("cost"), .1, .1);
                    // arrS[x]=newItems.get("name")+"";
                    // arrS[x] = ss;
                }

                for(int x=0;x<myPlumber.length;x++)
                {
                    System.out.println("myPlumber"+x);
                    myPlumber[x].print();
                }



                return myPlumber;

        } catch(Exception err) {
            Log.e(err);
        }
        // searchLocations();
        return myPlumber;
    }
    public GPS[] getGpsData()
    {
        System.out.println("*********************** getGpsData()");
        GPS[] MYGPS;
        ConnectionRequest req=new ConnectionRequest();
        //   req.setUrl("https://www.googleapis.com/calendar/v3/calendars/weblite.ca_5778lgg76mo76r01osl63o9hbs@group.calendar.google.com/events?key=AIzaSyBzpCgeAgkMDYSZKSfpuosxt5iS0ON353E");
        //"https://api.steampowered.com/IEconDOTA2_570/GetGameItems/V001/?key=0C2F97891D57A59E5253DB192450D1DB"
        GPS[] myGPS= new GPS[1];
      //  myGPS[0]=new GPS(34.3,33.2, "Test","one");

        req.setUrl("http://maps.ma1geek.org/getData.php");

        req.setPost(false);
        req.setHttpMethod("GET");
        NetworkManager.getInstance().addToQueueAndWait(req);
        com.codename1.io.JSONParser parser=new com.codename1.io.JSONParser();
        try {
            Hashtable result;
            System.out.println(req.getResponseData());
            if(req.getResponseData()!=null) {
                result = parser.parse(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));


                System.out.println("test" + result);
                System.out.println(parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()))));
                Map response = parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));


                System.out.println("hope" + response.get("root"));



               // LinkedHashMap allItems = new LinkedHashMap();
                   // allItems = (LinkedHashMap) response.get("root");
                // allItems=(LinkedHashMap)response.get("items");
               // System.out.println(allItems.size() + "");

               // System.out.println(allItems.get("items") + "");

                ArrayList s = (ArrayList) response.get("root");
                System.out.println("size"+s.size());
                String[] arrS = new String[s.size()];
                MYGPS = new GPS[s.size()];
                int zz;
                for (int x = 0; x < s.size(); x++) {
                    //System.out.println((s.get(x)).toString());

                    StringTokenizer st = new StringTokenizer((s.get(x)).toString(),",[]");

                    while (st.hasMoreTokens()) {
                       // System.out.println("wow");
                        System.out.println(st.nextToken());
                        System.out.println("this is my x"+x);
                        MYGPS[x]=new GPS(Double.parseDouble(st.nextToken()),Double.parseDouble(st.nextToken()),st.nextToken(),st.nextToken());


                    }
                        System.out.println(" bla");





                  //  LinkedHashMap newItems = (LinkedHashMap) s.get(x);
                  //  System.out.println(newItems.get("name"));
                  //  String ss = newItems.get("name") + "";
                   // ss = ss.substring(5, ss.length());
                  //  AllItems[x] = new GPS(ss, (double) newItems.get("cost"), .1, .1);
                    // arrS[x]=newItems.get("name")+"";
                  //  arrS[x] = ss;
                }
                for (int x = 0; x < s.size(); x++) {
                    System.out.println("this is "+x+MYGPS[x].name+"lat"+MYGPS[x].latatude+"  long "+MYGPS[x].longitude +"discription"+MYGPS[x].disctiption );
                }

                return (MYGPS);
            }

     /*       Map<String, Object> r1 = (Map<String, Object>)s.get(0);
            String parsedText = (String)r1.get("ParsedText");
         //  Hashtable tab =parser.parse(s.get(0));
            System.out.println("fred"+r1.get(0)+"");

            Set set = allItems.entrySet();

            // Get an iterator
            Iterator i = set.iterator();

            // Display elements
            while(i.hasNext()) {
                Map.Entry me = (Map.Entry)i.next();
                System.out.print(me.getKey() + ": ");
                System.out.println(me.getValue());
            }

          //  System.out.println(items.)

*/
        } catch (IOException e) {
            e.printStackTrace();
        }
        return (null);
    }
/*
    public Plumber[] getData()
    {
        ConnectionRequest req=new ConnectionRequest();
        //   req.setUrl("https://www.googleapis.com/calendar/v3/calendars/weblite.ca_5778lgg76mo76r01osl63o9hbs@group.calendar.google.com/events?key=AIzaSyBzpCgeAgkMDYSZKSfpuosxt5iS0ON353E");
        //"https://api.steampowered.com/IEconDOTA2_570/GetGameItems/V001/?key=0C2F97891D57A59E5253DB192450D1DB"
        req.setUrl("https://api.steampowered.com/IEconDOTA2_570/GetGameItems/V001/?key=0C2F97891D57A59E5253DB192450D1DB");

        req.setPost(false);
        req.setHttpMethod("GET");
        NetworkManager.getInstance().addToQueueAndWait(req);
        com.codename1.io.JSONParser parser=new com.codename1.io.JSONParser();
        try {
            Hashtable result;
            System.out.println(req.getResponseData());
            if(req.getResponseData()!=null) {
                result = parser.parse(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));


               // System.out.println("test" + result);
              //  System.out.println(parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()))));
                Map response = parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData())));
              //  System.out.println("hope" + response.get("result"));


                LinkedHashMap allItems = new LinkedHashMap();
                allItems = (LinkedHashMap) response.get("result");
                // allItems=(LinkedHashMap)response.get("items");
                System.out.println(allItems.size() + "");

                //System.out.println(allItems.get("items") + "");
                ArrayList s = (ArrayList) allItems.get("items");
                String[] arrS = new String[s.size()];
                Plumber[] AllItems = new Plumber[s.size()];
                for (int x = 0; x < s.size(); x++) {
                    LinkedHashMap newItems = (LinkedHashMap) s.get(x);
                    System.out.println(newItems.get("name"));
                    String ss = newItems.get("name") + "";
                    ss = ss.substring(5, ss.length());
   //fix                 AllItems[x] = new Plumber(ss, (double) newItems.get("cost"), .1, .1);
                    // arrS[x]=newItems.get("name")+"";
                    arrS[x] = ss;
                }
                return (AllItems);
            }
            else
            {
                Plumber[] AllItems2 = new Plumber[1];
     //fix           AllItems2[0]= new Plumber("fred",300,23,3);
                return(AllItems2 );
            }
     /*       Map<String, Object> r1 = (Map<String, Object>)s.get(0);
            String parsedText = (String)r1.get("ParsedText");
         //  Hashtable tab =parser.parse(s.get(0));
            System.out.println("fred"+r1.get(0)+"");

            Set set = allItems.entrySet();

            // Get an iterator
            Iterator i = set.iterator();

            // Display elements
            while(i.hasNext()) {
                Map.Entry me = (Map.Entry)i.next();
                System.out.print(me.getKey() + ": ");
                System.out.println(me.getValue());
            }

          //  System.out.println(items.)


        } catch (IOException e) {
            e.printStackTrace();
        }
        return (null);
    }
*/
    public void showForm() {
        Form hi = new Form("Star Slider", new BoxLayout(BoxLayout.Y_AXIS));
        hi.add(FlowLayout.encloseCenter(createStarRankSlider()));
        hi.show();
    }

    private void initStarRankStyle(Style s, Image star) {
        s.setBackgroundType(Style.BACKGROUND_IMAGE_TILE_BOTH);
        s.setBorder(Border.createEmpty());
        s.setBgImage(star);
        s.setBgTransparency(0);
    }

    private Slider createStarRankSlider() {
        Slider starRank = new Slider();
        starRank.setEditable(false);
        starRank.setMinValue(0);
        starRank.setMaxValue(100);
     //   Font fnt = Font.createTrueTypeFont("native:mainLight", "native:mainLight").
        Font fnt= Font.getDefaultFont();
        Style s = new Style(0xffff33, 0, fnt, (byte)0);
        Image fullStar = FontImage.createMaterial(FontImage.MATERIAL_STAR, s).toImage();
        s.setOpacity(100);
        s.setFgColor(0);
        Image emptyStar = FontImage.createMaterial(FontImage.MATERIAL_STAR, s).toImage();
        initStarRankStyle(starRank.getSliderEmptySelectedStyle(), emptyStar);
        initStarRankStyle(starRank.getSliderEmptyUnselectedStyle(), emptyStar);
        initStarRankStyle(starRank.getSliderFullSelectedStyle(), fullStar);
        initStarRankStyle(starRank.getSliderFullUnselectedStyle(), fullStar);
        starRank.setPreferredSize(new Dimension(fullStar.getWidth() * 5, fullStar.getHeight()));
        return starRank;
    }
    public void stop() {
        current = Display.getInstance().getCurrent();
    }

    public void destroy() {
    }
}